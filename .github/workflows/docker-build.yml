name: Build, Push to ECR, and Deploy to EKS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Configure AWS credentials using secrets stored in GitHub
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    # Step 3: Log in to Amazon ECR
    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URL }}

    # Step 4: Build the Docker image
    - name: Build Docker image
      run: |
        docker build -t flask-app .

    # Step 5: Tag the Docker image for ECR
    - name: Tag Docker image
      run: |
        docker tag flask-app:latest ${{ secrets.ECR_REPOSITORY_URL }}:latest

    # Step 6: Push the Docker image to ECR
    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.ECR_REPOSITORY_URL }}:latest

    # Step 7: Set up kubectl and configure kubeconfig for EKS
    - name: Set up kubectl
      uses: aws-actions/eks-kubectl-action@v1
      with:
        cluster-name: itsawscom
        region: ${{ secrets.AWS_DEFAULT_REGION }}
        # If you are using a specific IAM role for EKS, uncomment and fill the role-to-assume:
        # role-to-assume: arn:aws:iam::YOUR_ACCOUNT_ID:role/YOUR_ROLE_NAME

    # Step 8: Update the Kubernetes deployment with the new Docker image
    - name: Update Kubernetes deployment
      run: |
        kubectl set image deployment/flask-app flask-app=${{ secrets.ECR_REPOSITORY_URL }}:latest
